RULE datectSituationCollaborationType_pushData_NotificationResponse HIDDEN WITH ars_dependentResource="/collaborationtypes/datectSituationCollaborationType"
WHEN PUBLISH OCCURS ON "/notifications/datectSituationCollaborationType/pushData" as event

log.debug("collaboration.datectSituationCollaborationType.pushData.response: received notification response: {}", [event.toString()])
// Re-establish collaboration context by parsing the name of the chatroom in the event
// TODO: Rename field in ArsPayloadMessage to be collaborationId
var collaborationId = event.newValue.state.collaborationId
if (!collaborationId) {
    exception("io.vantiq.collaboration.datectSituationCollaborationType.pushData.response.error",
    "Could not find an associated collaboration instance for response to notification activity: {0}", ["pushData"])
}

// Get this collaboration instance based on the id in the published payload
var collaboration = SELECT EXACTLY ONE FROM collaborations WHERE id == collaborationId

// update the collaboration instance results to indicate a user has arrived
if (!collaboration.results.pushData) {
    collaboration.results.pushData = { "responses": []}
} else if (!collaboration.results.pushData.responses) {
    collaboration.results.pushData.responses = []
}

// construct an object with the arrived user's name and the time they arrived
var response = {
    "username": event.newValue.username,
    "responseTime": now(),
    "response": event.newValue.values,
    "deviceId": event.newValue.deviceId,
    "deviceName": event.newValue.deviceName,
    "submitValue": event.newValue.submitValue
}
collaboration.results.pushData.responses.push(response)

log.debug("collaboration.datectSituationCollaborationType.pushData.response: Saving response: {} for collaboration id: {}", [response, collaboration.id])

// Save the change to results
ALTER collaboration ({results: collaboration.results, id: collaboration.id})

// do prep work for executing any [first]ResponseBehaviors
SELECT EXACTLY ONE FROM collaborationtypes as ct WHERE name == collaboration.collaborationType

var activityType = ct.assembly["pushData"]

var context = CollaborationGeneration.establishCollaborationContext(collaboration, activityType.instanceParameters)
context.event = event.newValue
context.response = response

if (false) {
    // execute firstResponseBehaviors only if this was the first response we saved to results
    if (collaboration.results.pushData.responses.size() == 1) {
        log.debug("collaboration.datectSituationCollaborationType.pushData.firstResponse: Preparing to execute first response behaviors for response: {} in collaboration id: {}", [response, collaboration.id])
        
        log.debug("collaboration.datectSituationCollaborationType.pushData.firstResponse: Successfully executed first response behaviors for collaboration id: {}", [collaboration.id])
    }
}

if (false) {
    log.debug("collaboration.datectSituationCollaborationType.pushData.response: Preparing to execute response behaviors for response: {} in collaboration id: {}", [response, collaboration.id])
    
    log.debug("collaboration.datectSituationCollaborationType.pushData.response: Successfully executed response behaviors for collaboration id: {}", [collaboration.id])
}

log.debug("collaboration.datectSituationCollaborationType.pushData.response: Successfully processed response: {} to notification for collaboration id: {}", [response, collaboration.id])